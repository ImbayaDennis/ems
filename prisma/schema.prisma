// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  //previewFeatures = ["multiSchema"]
}

datasource db {
  provider          = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  // shadowDatabaseUrl = env("SHADOW_DB_URL")
  url               = env("DATABASE_URL")
  //schemas           = ["dev", "dev_2"]
  relationMode      = "prisma"
}

model LeaveType {
  id            String          @id @default(cuid())
  leave_type    String?
  leave_desc    String?
  leave_days    Int?
  leaveRequests LeaveRequests[]
  requestApproved RequestApproved[]
  requestRejected RequestRejected[]
}

model LeaveRequests {
  id            String    @id @default(cuid())
  employee_id       String    @unique
  leave_type_id String?
  start_date    String?
  end_date      String?
  leave_days    Int?
  employee      Employee      @relation(fields: [employee_id], references: [id])
  leave_type    LeaveType? @relation(fields: [leave_type_id], references: [id])

  @@index([leave_type_id])
  @@index([employee_id])
}

model RequestApproved {
  id            String    @id @default(cuid())
  leave_type_id String?
  employee_id       String
  start_date    String?
  end_date      String?
  still_on_leave Boolean? @default(true)
  return_date   String?
  employee      Employee      @relation(fields: [employee_id], references: [id])
  leave_type    LeaveType? @relation(fields: [leave_type_id], references: [id])

  @@index([leave_type_id])
  @@index([employee_id])
}

model RequestRejected {
  id            String    @id @default(cuid())
  leave_type_id String?
  employee_id       String
  start_date    String?
  end_date      String?
  employee      Employee      @relation(fields: [employee_id], references: [id])
  leave_type    LeaveType? @relation(fields: [leave_type_id], references: [id])

  @@index([leave_type_id])
  @@index([employee_id])
}

model Employee {
  id            String  @id @default(cuid())
  employee_id   String? @unique
  name          String?
  email         String? @unique
  org_id        String? @unique
  leave_days    Int?
  leave_bal     Int?
  user          User?
  leaveRequests LeaveRequests?
  requestApproved RequestApproved[]
  requestRejected RequestRejected[]
  organization  Organization? @relation(fields: [org_id], references: [id], onDelete: Cascade)

  @@index([org_id])
}

model Organization {
  id            String @id @default(cuid())
  name          String
  epmloyees     Employee[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          String?
  org_id        String?
  accounts      Account?
  sessions      Session[]
  Employee      Employee? @relation(fields: [email], references: [email], onDelete: Cascade)

  @@index([email])
  @@index([org_id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
